What is Ansible?
#############################
-> Configuration As a code (CAAC)

-> Ansible is an open-source automation tool used for 
a. configuration management
b. application deployment
c. copy file from one machine to another

-> Examples of configuration management tools
  a. chef
  b. Puppet
  c. Ansible

Basic Ansible Architecture
##############################

a. Control Node: The machine where Ansible is installed and commands are run.
b. Managed Nodes: The target machines that Ansible configures.
c. Inventory: A file listing target machines, grouped by categories.
d. Playbooks: YAML/yml files containing automation instructions.



How to Configure Ansible?
########################################################################################################################

Step-1: Create 3 instance s of t2.micro Amazon Linux VMs in AWS. 
a. 1 for - Control Node
b. 2 for - Managed Nodes

Note: Connect to all 3 VMs using MobaXterm

Step-1: Do the following setup in all 3 machines
a) Create user: 
	sudo useradd ansible
	sudo passwd ansible

b) Configure user in sudoers file
	sudo visudo
	ansible ALL=(ALL) NOPASSWD: ALL

c) Update sshd config file
	sudo vi /etc/ssh/sshd_config

-> change PasswordAuthentication "no" and  PermitEmptyPasswords "yes"

d) Restart the server
	sudo service sshd restart
_____________________________________________________________________________________________

Step-2: Install Ansible in Control Node
a) Switch to Ansible user
	sudo su ansible
	cd ~
b) Install Python because ansible is developed using python & to run ansible we require python software
  	sudo yum install python3 -y

c) cross Check python is installed?
	python3 --version

d) Install PIP (package manager) for downloading softwares and intalling it
	sudo yum -y install python3-pip

e) Install Ansible using Python PIP
	pip3 install ansible --user

f) Verify ansible version
	ansible --version
g) Create ansible folder under /etc
	sudo mkdir /etc/ansible 
________________________________________________________________________________________________
Step-3: Generate SSH Key In your Control Node and Copy that SSH key into Managed Nodes

a) Switch to ansible user
	sudo su ansible

b) Generate ssh key using below command
	ssh-keygen

c) Copy it to Managed Nodes as ansible user
	ssh-copy-id ansible@<ManagedNode-Private-IP-address>


Note: Repeat above command by updating HOST IP for all the managed Servers.
____________________________________________________________________________________________________
Step-4: Update Host Inventory in Ansible Server to add managed node servers details

	sudo vi /etc/ansible/hosts
	[webservers]
	192.31.0.247
	[dbservers]
	192.31.0.17
______________________________________________________________________________________________________

Step-5: Test Connectivity
	ansible all -m ping
############################################################################################################

Ansible ad-hoc commands allow us to run one-time commands on remote machines without writing a playbook. These commands use modules to perform tasks like checking connectivity, executing shell commands, installing packages, and managing services.
#############################################################################################################

1️⃣ Basic Syntax
_____________________________________________________________
ansible [all/group-name/host] -m <module> -a "<arguments>"
_____________________________________________________________

all → Runs the command on all configured hosts.

group-name → Runs the command on a specific group of hosts.

private-ip → Targets a specific host by its IP.

-m → Specifies the Ansible module to use.

-a → Passes arguments to the module.

#########################################################################################
1. Test Connectivity (ping module)
ansible all -m ping
✅ Effect: Pings all hosts in the inventory to verify connectivity.

ansible webservers -m ping
✅ Effect: Pings only the webservers group.
########################################################################################

2. Run Shell Commands (shell module)

ansible all -m shell -a "date"
✅ Effect: Runs the date command on all remote machines.

ansible dbservers -m shell -a "df -h"
✅ Effect: Checks disk space on all dbservers.
###############################################################################################
3. Install Packages (yum / apt modules)
For RHEL/CentOS (Using yum)
ansible all -m yum -a "name=git state=present"
✅ Effect: Installs git on all managed hosts.

ansible webservers -m yum -a "name=httpd state=latest"
✅ Effect: Installs or updates Apache (httpd) on all webservers.

For Ubuntu/Debian (Using apt)
ansible all -m apt -a "name=nginx state=latest update_cache=yes"
✅ Effect: Installs or updates nginx and refreshes package cache.
##################################################################################################
4. Start/Stop Services (service module)
ansible webservers -m service -a "name=httpd state=started"
✅ Effect: Starts Apache (httpd) on webservers.

ansible dbservers -m service -a "name=mysql state=stopped"
✅ Effect: Stops MySQL on dbservers.
################################################################################################
5. Copy Files to Remote Hosts (copy module)

ansible all -m copy -a "src=/home/user/local.conf dest=/etc/config.conf mode=0644"
✅ Effect: Copies local.conf to /etc/config.conf on all managed hosts.
###############################################################################################
